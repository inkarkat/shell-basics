#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[(-p|--paged|--inbox) [-o|--with-output]] [.] COMMAND [ARG ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute (/ source) COMMAND [ARG ...] with trace output (xtrace / set -x)
enabled.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --paged|-p		Show the trace separately after the execution. Output
			and errors are shown separately, and are not part of the
			trace.
    --inbox		Write the trace into the inbox.
HELPTEXT
}
setupCaptureAndViewing()
{
    viewer=("$@")
    TMPFILE="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TEMP:-/tmp}/$(basename -- "$0").$$$RANDOM")"
    trap "set +x; ${isWithOutput:+exec 1>&43 2>&44 43>&- 44>&-; sleep 1; }exec 42>&-; viewTrace" EXIT
    exec 42>"$TMPFILE"
    if [ "$isWithOutput" ]; then
	exec 43>&1 44>&2
	exec >  >(tee -ia "$TMPFILE")
	exec 2> >(tee -ia "$TMPFILE" >&2)
    fi
    BASH_XTRACEFD=42
}
viewTrace()
{
    sed -i '${ /^+ set +x$/d }' -- "$TMPFILE"
    "${viewer[@]}" "$TMPFILE"
    rm -f -- "$TMPFILE" 2>/dev/null
}
isWithOutput=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--paged|-p)	shift; setupCaptureAndViewing "${PAGER:-less}" --RAW-CONTROL-CHARS --;;
	--inbox)	shift; setupCaptureAndViewing inbox --base trace --;;
	--with-output|-o)
			shift; isWithOutput=t;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

program="$1"; shift
if [ "$program" = '.' ]; then
    # Sourced scripts may test for an interactive shell, so set it (even if that
    # has no effect other than modifying $- here).
    set -i
    program="$1"; shift
fi

BASH_ARGV0="$program"	# Bash 5+ only
set -x
. "$program" "$@"
