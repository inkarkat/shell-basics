#!/bin/bash
shopt -qs extglob # Enable extended file pattern matching operators from ksh (?(pattern-list), !(pattern-list), ...) in Bash.

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-d|--directories] [-s|--subpath] [-l|--files-matching|-1|--first-matching|-u|--unique-match|-L|--files-not-matching] ['GLOB' ...] -- FILESPEC [...] [-?|-h|--help]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] 'GLOB' FILESPEC [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Test whether the passed (anchored, extended) GLOB(s) match either the path or
just the filename of the passed FILESPEC(s).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --directories|-d	Also match directories (without trailing /; e.g. foo in
			foo/bar/file).
    --subpath|-s	Also match subpaths (e.g. bar/file in foo/bar/file) in
			addition to the full passed path.
SEE ALSO:
- expandglob directly matches a passed GLOB (unlike here just a single one) for
  full filespecs on the file system; FILESPECs do not have to be passed, but it
  cannot just cover the filename or subpaths.

EXIT STATUS:
    0	(At least one) match.
	No GLOB (but existing FILESPEC(s)) is passed.
    1	No matches / unique match.
HELPTEXT
}
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

print=
setPrint()
{
    if [ -n "$print" ]; then
	echo "ERROR: Only one of --files-matching, --first-matching, --unique-match, or --files-not-matching can be specified!"
	echo
	printUsage "$0"
	exit 2
    fi >&2
    print="${1:?}"
}
isMatchDirectories=
isMatchSubPaths=
typeset -a globs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		    shift; printLongUsage "$0"; exit 0;;
	--directories|-d)	    shift; isMatchDirectories=t;;
	--subpath|-s)		    shift; isMatchSubPaths=t;;
	--files-matching|-l)	    shift; setPrint matching;;
	--first-matching|-1)	    shift; setPrint first;;
	--unique-match|-u)	    shift; setPrint unique
				    trap 'printUniqueMatch' EXIT
				    ;;
	--files-not-matching|-L)    shift; setPrint not-matching;;
	--)			    shift; break;;
	-*)			    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			    globs+=("$1"); shift;;
    esac

    if [ $# -eq 0 ]; then
	set -- "${globs[@]:1}"
	globs=("${globs[0]}")
	break
    fi
done

uniqueMatch=
printUniqueMatch()
{
    if [ -n "$uniqueMatch" ]; then
	printf "%s\\n" "$uniqueMatch"
	exit 0
    fi
}

handleResult()
{
    local found="${1?}"; shift
    local filespec="${1:?}"; shift

    if [ "$found" ]; then
	case "$print" in
	    matching)
		printf '%s\n' "$filespec"
		status=0
		;;
	    first)
		printf '%s\n' "$filespec"
		exit 0
		;;
	    unique)
		if [ -n "$uniqueMatch" ]; then
		    trap '' EXIT
		    exit 1
		else
		    uniqueMatch="$filespec"
		fi
		;;
	    not-matching)
		;;
	    *)	exit 0;;
	esac
    elif [ "$print" = not-matching ]; then
	printf '%s\n' "$filespec"
    fi
}

status=1
if [ ${#globs[@]} -eq 0 ]; then
    # No GLOBs to match. Check that at least one FILESPEC is given and exists as
    # a file (and isn't just an unmatched glob).
    if [ $# -eq 0 ]; then
	exit 2  # No FILESPECs to match.
    fi

    for filespec
    do
	handleResult "$([ -e "$filespec" -o -h "$filespec" ] && printf t)" "$filespec"
    done
    exit $status
elif [ $# -eq 0 ]; then
    exit 1  # No FILESPECs to match.
fi


for filespec
do
    found=
    filename="$(basename -- "$filespec")"

    for g in "${globs[@]}"
    do
	case "$filename" in
	    @($g)) found=t; break;;
	esac
	case "$filespec" in
	    @($g)) found=t; break;;
	esac
	if [ "$isMatchDirectories" ]; then
	    case "$filespec" in
		@($g)/*) found=t; break;;
	    esac
	    if [ "$isMatchSubPaths" ]; then
		case "$filespec" in
		    */@($g)/*) found=t; break;;
		esac
	    fi
	fi
	if [ "$isMatchSubPaths" ]; then
	    case "$filespec" in
		*/@($g)) found=t; break;;
	    esac
	fi
    done

    handleResult "$found" "$filespec"
done
exit $status
