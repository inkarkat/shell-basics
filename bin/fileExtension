#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-1|--single] [-d|--strip|-b|--basename|-s|--split|-3|--split-all|-c INSERTION|--splice INSERTION|-f EXT|--default EXT|-m|--modify EXT] [--] FILENAME [DEFAULT-EXT] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the file extension (without the leading .) of FILENAME (or DEFAULT-EXT /
nothing if no extension is found).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --single|-1	Just parse a single .extension (instead of a maximum of three).
    --strip|-d	the extension is removed instead and the bare (path +) name
		without extension is printed
    --basename|-b
		both path and extension are removed; the bare name without path
		and extension is printed
    --split|-s	both (path +) name and extension are printed on separate lines,
		e.g. for parsing via read
    --split-all|-3
		path (. if none), name, and extension are printed on separate
		lines
    --splice|-c	INSERTION is inserted at the end of the file name, before the
		extension(s)
    --default|-f EXT
		Just append EXT to FILENAME if it doesn't have one yet.
    --modify|-m EXT
		Change any existing file extension to EXT.
HELPTEXT
    printf 'Example: readarray -t fileSplit < <(%q --split "foo bar.tar.gz")\n' "$(basename "$1")"
}

isSingle=
output=ext
insertion=
defaultExtension=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--single|-1)	shift; isSingle=t;;
	--strip|-d)	shift; output=strip;;
	--basename|-b)	shift; output=basename;;
	--split|-s)	shift; output=split;;
	--split-all|-3)	shift; output=splitall;;
	--splice|-c)	shift; output=splice; insertion="$1"; shift;;
	--default|-f)	shift; output=default; defaultExtension="${1:?}"; shift;;
	--modify|-m)	shift; output=modify; defaultExtension="${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -lt 1 -o $# -gt 2 ]; then
    printUsage "$0" >&2
    exit 2
fi

filename="$1"; shift
if [ -z "$defaultExtension" ]; then
    defaultExtension="$1"
    shift
fi
if [[ "$defaultExtension" = */* ]]; then
    echo 'ERROR: EXT must not contain /.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

# Handle at most three file extensions with each having a maximum of 10
# characters (to avoid false positives as in "invoice Mr. Flabberwocky.txt").
if [[ ! "$isSingle" && "$filename" =~ ^(.*)\.([[:alnum:]]{1,10}\.[[:alnum:]]{1,10}\.[[:alnum:]]{1,10})$ ]] ||
    [[ ! "$isSingle" && "$filename" =~ ^(.*)\.([[:alnum:]]{1,10}\.[[:alnum:]]{1,10})$ ]] ||
    [[ "$filename" =~ ^(.*)\.([[:alnum:]]{1,10})$ ]]; then
    name="${BASH_REMATCH[1]}"
    ext="${BASH_REMATCH[2]}"
else
    name="${filename%.}"
    ext="$defaultExtension"
fi

case "$output" in
    default)	printf '%s.%s\n' "$name" "$ext";;
    ext)	printf '%s\n' "$ext";;
    strip)	printf '%s\n' "$name";;
    basename)	printf '%s\n' "$(basename -- "$name")";;
    split)	printf '%s\n%s\n' "$name" "$ext";;
    splitall)	printf '%s\n%s\n%s\n' "$(dirname -- "$name")" "$(basename -- "$name")" "$ext";;
    splice)	printf '%s%s%s\n' "$name" "$insertion" "${ext:+.}$ext";;
    modify)	printf '%s.%s\n' "$name" "$defaultExtension";;
    *)          printf >&2 'ASSERT: Invalid output: %s\n' "$output"; exit 2;;
esac
