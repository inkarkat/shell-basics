#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Duplicate standard input to a debug file (DEBUGGEE.log) if debugging is enabled
for the debuggee: DEBUG=DEBUGGEE DEBUGGEE, and print the filespec to standard
error at the end. If --for DEBUGGEE is not specified, will take the name of the
parent process.
With "DEBUG=debugtee=FILESPEC,DEBUGGEE DEBUGGEE" will log to a custom FILESPEC
instead.
With "DEBUG=debugtee DEBUGGEE" will show for what DEBUGGEE it will enable (if
not actually enabled).
HELPTEXT
    echo
    printf 'Usage: cat FILE [...] | %q %s | COMMAND ...\n' "$(basename "$1")" '[--for DEBUGGEE]'
    printf "Usage: cat FILE [...] | eval \${DEBUG:+%q %s |} 'COMMAND [...]'\\n" "$(basename "$1")" '[--for DEBUGGEE]'
}
debuggee=
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --for)		shift; debuggee="${1?}"; shift;;
    --)			shift;;
esac
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

[ -n "$DEBUG" ] || exec cat

finally()
{
    if [ -s "$debugteeFilespec" ]; then
	printf >&2 "%sDebugtee'd to %q\\n" "$PS4" "$debugteeFilespec"
    elif [ -e "$debugteeFilespec" ]; then
	# Clean up an empty debug log.
	rm --force -- "$debugteeFilespec" || :
    fi
}

if [ -z "$debuggee" ]; then
    {
	IFS= read -r -d '' debugteeCmd
	IFS= read -r -d '' debugteeSecond
    } < /proc/${PPID}/cmdline
    debuggee="$(commandName --no-interpreter --undefined debugtee -- "$debugteeCmd" "$debugteeSecond")"
fi

case ",${DEBUG:-}," in
    *,${debuggee},*)
	case ",${DEBUG:-}," in
	    *,debugtee=*,*) filespec=",${DEBUG},"; filespec="${filespec#*,debugtee=}"; filespec="${filespec%%,*}"
			    debugteeFilespec="$(realpath --no-symlinks -- "$filespec")" || debugteeFilespec="$filespec"
			    ;;
	    *)		    debugteeFilespec="${PWD}/${debuggee}.log";;
	esac

	trap finally EXIT
	tee --append -- "$debugteeFilespec"
	;;
    *,debugtee,*)
	printf >&2 'debugtee: Will activate with DEBUG=%q\n' "$debuggee"
	;&
    *)	exec cat
esac
