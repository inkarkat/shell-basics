#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Print lines where selected field(s) N (-N counted from behind), separated by FS, match a PATTERN.
HELPTEXT
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-F|--field-separator FS] GREP-OPTIONS [...] [-]N|SEP [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '-i|--input FILESPEC [...] GREP-OPTIONS [...] [-]N|SEP [...] [-?|-h|--help]'
    cat <<HELPTEXT
Print lines where any but the passed field(s) N (-N counted from behind), separated by FS, match a PATTERN.
HELPTEXT
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-F|--field-separator FS] -V|--invert-fields GREP-OPTIONS [...] [-]N|SEP [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '-i|--input FILESPEC [...] -V|--invert-fields GREP-OPTIONS [...] [-]N|SEP [...] [-?|-h|--help]'
}

typeset -a grepArgs=()
typeset -a grepPatternArgs=()
unset separatorGrepArgs
typeset -a fsArgs=()
fieldSeparator='[	 ]'
typeset -a awkArgs=()
isInvertFields=
isOnlyMatching=
isPerlRegexp=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printUsage "$0"; exit 0;;

	-+([EGi]))		grepArgs+=("$1"); shift;;
	--@(extended-regexp|basic-regexp|ignore-case))
				grepArgs+=("$1"); shift;;
	--fixed-strings)	grepArgs+=("$1"); [ "$fieldSeparator" = '[	 ]' ] && fieldSeparator=' '; shift;;
	--perl-regexp|-P)	grepArgs+=("$1"); isPerlRegexp=t; shift;;
	--word-regexp|-w)	grepArgs+=("$1"); separatorGrepArgs=(-e '^[0-9][0-9]*'); shift;;    # A (usually) non-word separator won't be matched; need to aim for the leading field number to include the unfiltered fields.
	--invert-match|-v)	grepArgs+=("$1"); separatorGrepArgs=(); shift;;	# Because of the inversion, we must not match the separators now so that they get included.
	--only-matching|-o)	grepArgs+=("$1"); isOnlyMatching=t; shift;;
	--regexp|-e)		grepPatternArgs+=("$1" "$2"); shift; shift;;
	--regexp=*)		grepPatternArgs+=(--regexp "${1#--regexp=}"); shift;;
	--file|-f)		grepArgs+=("$1" "$2"); shift; shift;;
	--file=*)		grepArgs+=("$1"); shift;;

	--input|-i)		shift; awkArgs+=("$1"); shift;;
	--invert-fields|-V)	shift; isInvertFields=t;;
	--field-separator|-F)	shift; fsArgs=(-F "$1"); fieldSeparator="$1"; shift;;
	--)			shift; break;;
	-+([0-9]))		break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
if [ ${#grepPatternArgs[@]} -eq 0 ]; then
    echo >&2 'ERROR: No GREP-OPTIONS passed.'
    echo >&2
    printUsage "$0" >&2
    exit 2
fi
case " ${!separatorGrepArgs*} " in
    *" separatorGrepArgs "*) true;;
    *) false;;
esac || separatorGrepArgs+=(-e "$fieldSeparator")   # Include unfiltered fields.
if [ "$isOnlyMatching" ] && [ ${#separatorGrepArgs[@]} -gt 0 ]; then
    # Need to make whole unfiltered fields match. Of course, this is impossible
    # with --fixed-strings.
    separatorGrepArgs[1]=".*${fieldSeparator}.*"
fi
if [ "$isPerlRegexp" ] && [ ${#separatorGrepArgs[@]} -gt 0 ]; then
    # The -P option only supports a single pattern; need to combine the separator pattern with the passed argument.
    grepPatternArgs[1]="(?:${separatorGrepArgs[1]}|${grepPatternArgs[1]})"
    separatorGrepArgs=()
fi

: ${isInvertFields:=0}
awk "${fsArgs[@]}" -v "isInvertFields=${isInvertFields//t/1}" -v nrs="$*" '
function abort(message)
{
    print message > "/dev/stderr"
    print FS FS FS	# Need to also print minimal output so that the following grep pipeline step does not fail with exit status 1, eclipsing this exit status.
    exit 2
}
BEGIN {
    split(nrs, numbers, " ")
    for (n in numbers) {
	if (numbers[n] !~ /^-?[[:digit:]]+$/) {
	    abort("ERROR: Not a number: " numbers[n])
	}

	if (numbers[n] >= 0) {
	    fields[numbers[n]] = 1
	} else {
	    negfields[-1 * numbers[n] - 1] = 1
	}
    }
}
NR == 1 {
    # Use FS as output separator; it cannot be a regular expression here.
    firstTwoFields = $1 FS $2
    if (substr($0, 1, length(firstTwoFields)) == firstTwoFields) {
	OFS = FS
    } else if (FS == " " && (substr($0, 1, length(firstTwoFields)) == $1 "\t" $2)) {
	OFS = "\t"
    } else {
	abort("ERROR: The field separator has to be a literal string; it cannot be a regular expression.")
    }
}
{
    for (i = 1; i <= NF; i++) {
	printf "%s%s\n", (xor(! isInvertFields, i in fields || (NF - i) in negfields) ? i OFS : ""), $i
    }
    printf "0%s%s\n", OFS, OFS
}
' "${awkArgs[@]}" | \
    grep "${grepArgs[@]}" "${separatorGrepArgs[@]}" "${grepPatternArgs[@]}" | \
awk "${fsArgs[@]}" '
function join(array, start, end, result, i)
{
    if (end < start) return ""

    result = array[start]
    for (i = start + 1; i <= end; i++)
	result = result OFS array[i]
    return result
}
BEGIN {
    OFS = FS
    if (FS == " ") FS="[	 ]"	# Use a pattern that matches only a single space to prevent AWK from treating any runs of whitespace as separator; the pipeline has normalized to single spaces, anyway, and we need to be able to count the empty field numbers to determine aborts and ends of lines.
    status = 1
}
NF == 4 {
    # Triple separator signals abort.
    status = 0	# Do not affect the exit status of the pipeline; pipefail will return the one from the previous failing step.
    exit
}
NF == 3 {
    # Double separator signals end of line.

    if (OFS == " ") {
    	# The default AWK separator may result in either space or tab; take it
    	# from the input to use the right one.
    	OFS = substr($0, length($0))
    }

    if (isPicked) printf "%s\n", join(f, 1, i)

    delete f
    i = 0
    isPicked = 0
    next
}
NF == 2 {
    i = $1
    if (f[i] != "") {
	# The field is already taken, because grep -o has introduced additional
	# filtered lines. Join those with the previous filtered field now.
	for(j = 0; f[i + j] != ""; j++) {
	    f[i - 1] = f[i - 1] " " f[i + j]
	    f[i + j] = ""
	}
    }

    f[i] = $2
    next
}
{
    isPicked = 1
    status = 0
    f[++i] = $0
}
END {
    exit status
}
'
