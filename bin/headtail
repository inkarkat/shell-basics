#!/bin/bash
shopt -qs extglob

DEFAULT_LINES=5

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--lines=[-]NUM] [-D|--duplicate-if-short] [-s|--separator HEAD-TAIL-SEPARATOR|--separator-cutline|--separator-cut-what WHAT] [-q|--quiet|--silent|-v|--verbose] [--] [FILE ...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...] [-]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the first $DEFAULT_LINES and last $DEFAULT_LINES lines of each FILE to standard output (handling
overlaps).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --lines|-n [-]NUM	Print NUM lines instead of the default ${DEFAULT_LINES};
			with the leading '-', print all but NUM lines of each
			file.
    --duplicate-if-short|-D
			Always print 2 * (${DEFAULT_LINES} / the number of input lines
			(whichever is smaller)), duplicating lines if necessary.
    --separator|-s HEAD-TAIL-SEPARATOR
			Print HEAD-TAIL-SEPARATOR between the first and last
			lines. If only one line would be omitted, print the
			NUM+1 one instead. Inside, {} is replaced with the
			number (2 or more, because a single would-be omitted
			line does not print the separator) of omitted lines.
    --separator-cutline
			Print a separator in the form of a cutline between the
			first and last lines.
    --separator-cut-what WHAT
			Print a separator in the form of a cutline with WHAT in
			the middle. If WHAT contains {}, it is replaced with the
			number of omitted lines.
    --quiet|-q		Do not precede each FILE with a header.
    --verbose|-v	Precede with header even if processing just one FILE.
    By default, each FILE is precedes with a header giving the file name if more
    than one FILE is given.
HELPTEXT
}

algorithm=headTail
lines=$DEFAULT_LINES
isDuplicateIfShort=
separator=
header=auto
typeset -a headerArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--lines|-n)	shift
			case "$1" in
			    +(0))	shift; algorithm=blackhole;;
			    -+(0))	shift; algorithm=passThrough;;
			    -+([0-9]))	lines="${1#-}"; shift; algorithm=allButHeadTail;;
			    +([0-9]))	lines="$1"; shift;;
			    *)		printf '%s: invalid number of lines: %s\n' "$(basename "$0")" "$1"; exit 2;;
			esac
			;;
	--lines=*)	lines="${1#--lines=}"; shift;;
	--duplicate-if-short)
			shift; isDuplicateIfShort=t;;
	--separator|-s)	shift; separator="$1"; shift;;
	--separator-cutline)
			shift
			printf -v cutlineHalf "%$(((${COLUMNS:-80} - 8) / 2))s" '~'; printf -v cutlineHalf %s "${cutlineHalf// /\~}"
			separator="${cutlineHalf} [...] ${cutlineHalf}"
			;;
	--separator-cut-what)
			shift
			whatLength=${#1}; [[ "$1" =~ '{}' ]] && let whatLength+=4 # Make space for up to 999999.
			printf -v cutlineHalf "%$(((${COLUMNS:-80} - 4 - whatLength) / 2))s" '~'; printf -v cutlineHalf %s "${cutlineHalf// /\~}"
			separator="${cutlineHalf} [${1}] ${cutlineHalf}"
			shift
			;;
	--silent|--quiet|-q)
			headerArgs+=("$1"); shift; header=no;;
	--verbose|-v)	headerArgs+=("$1"); shift; header=yes;;
	--)		shift; break;;
	-)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

blackhole()
{
    # We can use head (or tail) as the only functionality is the file header;
    # the contents are all suppressed by the line count 0.
    head --lines=0 "${headerArgs[@]}" "$@"
}

passThrough()
{
    # We can use head (or tail) as the only functionality is the file header;
    # the contents are all suppressed by the line count 0.
    head --lines=-0 "${headerArgs[@]}" "$@"
}

headTail()
{
    exec awk \
	-v "lines=$lines" \
	-v "isDuplicateIfShort=$isDuplicateIfShort" \
	-v "separator=${separator//\\/\\\\}" \
	-v "header=$header" \
'
function printHeadTail(      omittedNum, start, i)
{
    if (bufCnt > lines && separator != "") {
	omittedNum = (bufCnt - lines)
	if (omittedNum == 1) {
	    print plusOneLine
	} else if (separator ~ /\{\}/) {
	    print gensub(/\{\}/, omittedNum, "g", separator)
	} else {
	    print separator
	}
    }

    start = (bufCnt < lines ? lines - bufCnt + 1 : 1)
    for (i = start; i <= lines; i++)
	print buf[((lastNr + i - 1) % lines) + 1]

    delete buf
    bufCnt = 0
    lastNr = 1
}
FNR == 1 {
    if (ARGIND > 1)
	printHeadTail()

    if (header == "yes" || header == "auto" && ARGC > 2) {
	printf (ARGIND > 1 ? "\n" : "") "==> %s <==\n", (FILENAME == "-" ? "standard input" : FILENAME)
    }
}
FNR <= lines {
    print
    if (! isDuplicateIfShort) next
}
FNR == (lines + 1) {
    plusOneLine = $0
}
{
    buf[((FNR - 1) % lines) + 1] = $0
    bufCnt++
    lastNr = FNR
}
END {
    printHeadTail()
}
' "$@"
}

allButHeadTail()
{
    exec awk \
	-v "lines=$lines" \
	-v "header=$header" \
'
FNR == 1 {
    bufCnt = 0

    if (header == "yes" || header == "auto" && ARGC > 2) {
	printf (ARGIND > 1 ? "\n" : "") "==> %s <==\n", (FILENAME == "-" ? "standard input" : FILENAME)
    }
}
FNR <= lines {
    next
}
{
    if (bufCnt < lines) {
	lastNr = bufCnt
	buf[bufCnt++] = $0
    } else {
	lastNr = (++lastNr % lines)
	print buf[lastNr]
	buf[lastNr] = $0
    }
}
' "$@"
}

$algorithm "$@"
