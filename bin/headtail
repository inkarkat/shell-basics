#!/bin/bash
shopt -qs extglob

DEFAULT_LINES=5

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--lines=NUM] [-q|--quiet|--silent|-v|--verbose] [--] [FILE ...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...] [-]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the first $DEFAULT_LINES and last $DEFAULT_LINES lines of each FILE to standard output (handling
overlaps).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --lines|-n NUM	Print NUM lines instead of the default $DEFAULT_LINES.
    --quiet|-q		Do not precede each FILE with a header.
    --verbose|-v	Precede with header even if processing just one FILE.
    By default, each FILE is precedes with a header giving the file name if more
    than one FILE is given.
HELPTEXT
}

lines=$DEFAULT_LINES
header=auto
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--lines|-n)	shift
			case "$1" in
			    +([0-9]))	lines="$1"; shift;;
			    *)		printf '%s: invalid number of lines: %s\n' "$(basename "$0")" "$1"; exit 2;;
			esac
			;;
	--lines=*)	lines="${1#--lines=}"; shift;;
	--silent|--quiet|-q)
			shift; header=no;;
	--verbose|-v)	shift; header=yes;;
	--)		shift; break;;
	-)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

exec awk \
    -v "lines=$lines" \
    -v "header=$header" \
'
function printHeadTail(      start, i)
{
    start = (bufCnt < lines ? lines - bufCnt + 1 : 1)

    for (i = start; i <= lines; i++)
	print buf[((lastNr + i - 1) % lines) + 1]

    delete buf
    bufCnt = 0
    lastNr = 1
}
FNR == 1 {
    if (ARGIND > 1)
	printHeadTail()

    if (header == "yes" || header == "auto" && ARGC > 2) {
	printf (ARGIND > 1 ? "\n" : "") "==> %s <==\n", (FILENAME == "-" ? "standard input" : FILENAME)
    }
}
FNR <= lines {
    print
    next
}
{
    buf[((FNR - 1) % lines) + 1] = $0
    bufCnt++
    lastNr = FNR
}
END {
    printHeadTail()
}
' "$@"
