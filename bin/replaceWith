#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: REPLACEWITH_NOOP_STATUS99 %q %s\n' "$(basename "$1")" '[-P|--keep-prefix-pattern PATTERN] [-S|--keep-suffix-pattern PATTERN] [-O|--pattern-is-optional] [--] ARG REPLACEMENT|(OLD=NEW|^=PREFIX|+=SUFFIX [...]) [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Replace ARG with the passed replacement (a complete overwrite or obtained by
modifying the original ARG).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --keep-prefix-pattern|-P PATTERN
			Ignore text matching PATTERN at the beginning of ARG
			while doing replacements.
    --keep-suffix-pattern|-S PATTERN
			Ignore text matching PATTERN at the end of ARG while
			doing replacements.
    --pattern-is-optional|-O
			If no replacements can be made with PATTERN, also
			attempt replacement on the full original ARG.
All PATTERNs are POSIX-style anchored extended regular expressions.
HELPTEXT
}

prefixPattern=
suffixPattern=
isPatternOptional=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--keep-prefix-pattern|-P)
			shift; prefixPattern="${1?}"; shift;;
	--keep-suffix-pattern|-S)
			shift; suffixPattern="${1?}"; shift;;
	--pattern-is-optional|-O)
			shift; isPatternOptional=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -lt 2 ]; then
    printUsage "$0" >&2
    exit 2
fi

typeset -a argAndReplacements=("$@")
result="$1"; shift
original="$result"
prefix=''
suffix=''
if [ -n "$prefixPattern" ] && [[ "$result" =~ ^($prefixPattern)(.*)$ ]]; then
    prefix="${BASH_REMATCH[1]}"
    result="${BASH_REMATCH[-1]}"
fi
if [ -n "$suffixPattern" ] && [[ "$result" =~ ^(.*)($suffixPattern)$ ]]; then
    result="${BASH_REMATCH[1]}"
    suffix="${BASH_REMATCH[2]}"
fi

isFirst=t
while [ $# -ne 0 ]
do
    if [[ "$1" =~ ^\^=. ]]; then
	result="${1#^=}${result}"
    elif [[ "$1" =~ ^\+=. ]]; then
	result+="${1#+=}"
    elif [[ "$1" =~ .= ]]; then
	# My EditSimilar syntax: OLD=NEW
	old="${1%%=*}"
	new="${1#*=}"
	result="${result/${old}/${new}}"
    elif [ "$isFirst" ]; then
	result="$1"
    else
	printf >&2 "ERROR: Invalid argument '%s'; only one plain REPLACEMENT allowed.\\n" "$1"
	exit 2
    fi
    shift
    isFirst=
done

status=
replacement="${prefix}${result}${suffix}"
if [ "$original" = "$replacement" ]; then
    if [ "$isPatternOptional" ] && [ -n "$prefixPattern" -o -n "$suffixPattern" ]; then
	exec "${BASH_SOURCE[0]}" "${argAndReplacements[@]}"
    fi
    status=${REPLACEWITH_NOOP_STATUS:-99}
fi
printf '%s\n' "$replacement"
exit ${status:-0}
