#!/bin/bash

: ${USERCHOICEFROMLIST_ENTRY_SEPARATOR:= / }
printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--question QUESTION] [--no-cancel] [--accept-single [--auto-selected-entry-message MSG]] [--no-entries-message MSG] [--selection-message MSG] [--interactive-selection-message MSG] [-s|--select SELECTION] [-k|--keep-prompt] [-t TIMEOUT] [-u FD] [--] ENTRIES [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Query the user for a single selection from ENTRIES to be selected by a unique
accelerator that is either pre-set (like "[t]his") or automatically chosen.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --question|-q QUESTION
			Print QUESTION before the choices.
    --no-cancel		Do not allow canceling via <Esc>; the script must be
			aborted via Ctrl-C or killed.
    --accept-single	Accept a single available ENTRY without prompting the
			user.
    --no-entries-message MSG
			Print MSG to stderr if there are no entries to choose
			from.
    --auto-selected-entry-message MSG
			Print MSG to stderr if a single entry has been
			automatically chosen; the entry itself is referenced by
			%s in MSG.
    --selection-message MSG
			Print MSG to stderr if entries have been chosen (either
			interactively or through SELECTION, but not when a
			single entry is automatically chosen); the entry itself
			is referenced by %s in MSG.
    --interactive-selection-message MSG
			Print MSG to stderr if entries have been chosen
			interactively, but not through SELECTION); the entry
			itself is referenced by %s in MSG.
    --select|-s SELECTION
			Automatically use SELECTION if that is identical to one
			of the passed ENTRIES. An invalid or empty SELECTION is
			silently ignored, and the user is prompted instead.
    --keep-prompt|-k	Keep the prompt and chosen answer on the screen instead
			of clearing it.
EXIT STATUS
    0	Complete success.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Could not find unique accelerator, internal error or failed assertion.
    124 There are no entries available and --no-entries-message is given.
    125 No entries were selected due to cancelling via <Esc>.
HELPTEXT
}

printIfDefined()
{
    local message="$1"; shift
    [ -z "$message" ] && return 1
    printf >&2 "${message}\\n" "$@"
}

question='Choose one:'
isAcceptSingle=
noEntriesMessage=
autoSelectedEntryMessage=
selectionMessage=
interactiveSelectionMessage=
cancelKey=$'\e'
selection=
typeset -a userchoiceArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--question|-q)	shift; question="$1"; shift;;
	--no-cancel)	shift; cancelKey='';;
	--accept-single)
			shift; isAcceptSingle=t;;
	--no-entries-message)
			shift; noEntriesMessage="$1"; shift;;
	--auto-selected-entry-message)
			shift; autoSelectedEntryMessage="$1"; shift;;
	--selection-message)
			    shift; selectionMessage="$1"; shift;;
	--interactive-selection-message)
			    shift; interactiveSelectionMessage="$1"; shift;;
	--select|-s)	shift; selection="$1"; shift;;
	--keep-prompt|-k)
			userchoiceArgs+=("$1"); shift;;
	-[tu])		userchoiceArgs+=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    if printIfDefined "$noEntriesMessage"; then
	exit 124
    else
	printUsage "$0" >&2
	exit 2
    fi
elif [ $# -eq 1 ] && [ "$isAcceptSingle" ]; then
    printIfDefined "$autoSelectedEntryMessage" "$1"
    printf '%s\n' "$1"
    exit 0
elif [ -n "$selection" ] && contains "$selection" "$@"; then
    printIfDefined "$selectionMessage" "$selection"
    printf '%s\n' "$selection"
    exit 0
fi

typeset -A reservedAccelerators=()
for entry
do
    [[ "$entry" =~ ^(.*)\[([a-zA-Z0-9])\](.*)$ ]] && \
	reservedAccelerators["${BASH_REMATCH[2]}"]=t
done

accelerators=
typeset -A acceleratorToEntry=()
typeset -A acceleratorToOriginalEntry=()
acceleratedEntryEnumeration=
for entry
do
    if [[ "$entry" =~ ^(.*)\[([a-zA-Z0-9])\](.*)$ ]]; then
	if [ -z "${acceleratorToEntry["${BASH_REMATCH[2]}"]}" ]; then
	    accelerators="${accelerators}${BASH_REMATCH[2]}"
	    acceleratorToEntry["${BASH_REMATCH[2]}"]="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
	    acceleratorToOriginalEntry["${BASH_REMATCH[2]}"]="$entry"
	    acceleratedEntryEnumeration="${acceleratedEntryEnumeration}${acceleratedEntryEnumeration:+"$USERCHOICEFROMLIST_ENTRY_SEPARATOR"}${entry}"
	else
	    printf >&2 'ERROR: Duplicate accelerator in %s; already exists in %s.\n' "$entry" "${acceleratorToOriginalEntry["${BASH_REMATCH[2]}"]}"
	    exit 3
	fi
    else
	gotAccelerator=
	for ((i = 0; i < ${#entry}; i++))
	do
	    a="${entry:$i:1}"
	    if [[ "$a" =~ ^[a-zA-Z0-9]$ ]] && [ -z "${acceleratorToEntry["$a"]}" ] && [ -z "${reservedAccelerators["$a"]}" ]; then
		accelerators="${accelerators}$a"
		acceleratorToEntry["$a"]="$entry"
		acceleratorToOriginalEntry["$a"]="$entry"
		acceleratedEntryEnumeration="${acceleratedEntryEnumeration}${acceleratedEntryEnumeration:+"$USERCHOICEFROMLIST_ENTRY_SEPARATOR"}${entry:0:$i}[${a}]${entry:$((i+1))}"
		gotAccelerator=t
		break
	    fi
	done
	if [ ! "$gotAccelerator" ]; then
	    printf >&2 'ERROR: Could not find unique accelerator for %s.\n' "$entry"
	    exit 3
	fi
    fi
done

chosenAccelerator="$(userchoice --valid "[${cancelKey}${accelerators}]" -n 1 -p "${question}${question:+ (}${acceleratedEntryEnumeration}${cancelKey:+${USERCHOICEFROMLIST_ENTRY_SEPARATOR}<Esc> to cancel}${question:+)}? " "${userchoiceArgs[@]}")" || exit $?
chosenEntry="${acceleratorToEntry["$chosenAccelerator"]}"

[ -n "$chosenEntry" ] || exit 125
printIfDefined "$interactiveSelectionMessage" "$chosenEntry" || \
    printIfDefined "$selectionMessage" "$chosenEntry"

printf '%s\n' "$chosenEntry"
