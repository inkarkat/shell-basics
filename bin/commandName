#!/bin/bash
shopt -qs extglob

: ${COMMANDNAME_INTERPRETERS='perl|python?(3)|ruby'}
: ${COMMANDNAME_SHELLS='?(ba|da|[cakz])sh'}
: ${COMMANDNAME_EXTENSIONS='?(.exe)'}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--eval] [--undefined UNDEFINED] [-n|--no-interpreter] [--] COMMANDLINE ... [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Extract the name (without path) of the (first) executed command from the passed
COMMANDLINE.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --eval	Also support interpolation via eval (basically, quoted commands).
    --undefined UNDEFINED
		If no command is found, return UNDEFINED instead of "undefined".
    --no-interpreter|-n
		Drop a generic interpreter (bash, perl, python, etc.) from the
		command-line and use the next (script filename) argument
		instead.
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" 'FOO=BAR /usr/bin/awk -F# "{ print \"$1\"; }"'
    printf '%q %s\n' "$(basename "$1")" "--eval 'test\ with\ spaces.sh foo bar'"
    printf '%q %s\n' "$(basename "$1")" '--eval '\''"test with spaces.sh" foo bar'\'''
    printf '%q %s\n' "$(basename "$1")" "--eval \"FOO=BAR GAGA=HI\ HO 'test with spaces.sh' foo bar\""
    printf '%q %s\n' "$(basename "$1")" '-n /usr/bin/python3 /tmp/testscript.py arg1 arg2'
}
isEval=
isDropInterpreter=
undefined=undefined
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--eval)		shift; isEval=t;;
	--undefined)	shift; undefined="$1"; shift;;
	--no-interpreter|-n)
			shift; isDropInterpreter=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printShortUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done


if [ "$isEval" ]; then
    literalReplacement="$undefined"
    literalReplacement="${literalReplacement//\\/\\\\}"
    literalReplacement="${literalReplacement//&/\\&}"

    # First eat individual preceding VAR=VAL arguments.
    while [[ "$1" =~ ^[[:alpha:]_][[:alnum:]_]+=(\\[[:space:]]|[^[:space:]\\])*$ ]]; do shift; done

    # Extract COMMAND from preceding VAR=VAL inside the first remaining
    # argument.
    set -o noglob
    readonly COMMAND_SEPARATOR_COLLECTION=';&|'
    netCommandLine="$(printf '%s\n' "${1:-${undefined}}" | sed \
	-e "s/^[[:space:]]*\\([[:alpha:]_][[:alnum:]_]\\+=\\(\\\\[[:space:]]\\|[^[:space:]\\\\]\\)*[[:space:]]\\+\\)*\\(\"\\([^\"]\\+\\)\"\\|'\\([^']\\+\\)'\\|\\([^${COMMAND_SEPARATOR_COLLECTION}]\\+\\)\\)\\([${COMMAND_SEPARATOR_COLLECTION}].*\\)\\?$/\\4\\5\\6/" \
	-e t \
	-e "s#.*#${literalReplacement//#/\\#}#" \
	-e q
    )"
    eval "set -- $netCommandLine"
else
    while [[ "$1" =~ ^[[:alpha:]_][[:alnum:]_]+= ]]; do shift; done
fi
commandFilespec="$(basename -- "${1:-${undefined}}")"

if [ "$isDropInterpreter" ]; then
    case "${commandFilespec,,}" in
	@(${COMMANDNAME_INTERPRETERS})${COMMANDNAME_EXTENSIONS}) ;&
	@(${COMMANDNAME_SHELLS})${COMMANDNAME_EXTENSIONS})
	    commandFilespec="$(basename -- "${2:-$1}")"
	    ;;
    esac
fi

printf '%s\n' "$commandFilespec"
