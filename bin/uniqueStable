#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-F|--field-separator FS] [-z|--null-data] [-M|--match-field [-]N [-M ...]|-S|--skip-field [-]N [-S ...]] [-s|--skip PATTERN [-s ...]] [-m|--match PATTERN [-m ...]] [-x|--ignore PATTERN [-x ...]] [--last|--both] [-i[SUFFIX]|--in-place[=SUFFIX]] [--] [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Omit repeated (also on non-adjacent) lines while keeping the ordering of the
original lines.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
Filters FILE(s) (or standard input) so that each line is contained only once (in
its first occurrence, across all FILEs).
    --in-place[=SUFFIX]|-i[SUFFIX]
			Edit FILE(s) in place (makes backup if SUFFIX supplied).
    --field-separator|-F FS
			Use FS as the input field separator (as with AWK).
    --null-data|-z	Separate lines by NUL characters instead of newlines.
    --skip|-s PATTERN	Do not consider the parts of the line that match
			PATTERN.
    --match|-m PATTERN	Only consider the parts of the line that match PATTERN.
			Other parts (and those parts that also match --skip
			PATTERN) are ignored when comparing with other lines for
			uniqueness.
    --skip-field|-S [-]N
			Do not consider the field(s) N (-N counted from behind).
			Cannot be combined with --skip, --match, or
			--match-field.
    --match-field|-M [-]N
			Only consider the field(s) N (-N counted from behind).
			Other fields are ignored when comparing for uniqueness.
			Cannot be combined with --skip, --match, or
			--match-field.
    --last		Print the last occurrence instead of the first. (This
			avoids double reversing the input / output.)
    --both		Print both first and last occurrences of each line.
    --ignore|-x PATTERN	Keep duplicate lines matching PATTERN. For example, use
			'^[ \\t]\$' to keep all lines that are empty or contain
			just whitespace.
All PATTERNs are AWK-style extended regular expressions.
HELPTEXT
}

typeset -a awkCall=(awk)
typeset -a awkArgs=()
order=first
isInPlace=
inPlaceExtension=
typeset -a skippedFields=()
typeset -a matchedFields=()
skipPattern=
matchPattern=
ignorePattern=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printLongUsage "$0"; exit 0;;
	--field-separator|-F)	awkArgs+=("$1" "$2"); shift; shift;;
	--null-data|-z)		shift; awkCall=(gawk); awkArgs+=(-v RS='\0' -v ORS='\0');;
	--skip-field|-S)	shift; skippedFields+=("$1"); shift;;
	--match-field|-M)	shift; matchedFields+=("$1"); shift;;
	--skip|-s)		shift; skipPattern+="${skipPattern:+|}${1:?}"; shift;;
	--match|-m)		shift; matchPattern+="${matchPattern:+|}${1:?}"; shift;;
	--ignore|-x)		shift; ignorePattern+="${ignorePattern:+|}${1:?}"; shift;;
	--last|--both)		order="${1#--}"; shift;;
	-i|--in-place)		isInPlace=t; shift;;
	-i?*|--in-place=*)	isInPlace=t; inPlaceExtension="${1#-i}"; inPlaceExtension="${inPlaceExtension#--in-place=}"; shift;;
	--)			shift; break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
if [ ${#skippedFields[@]} -gt 0 -a ${#matchedFields[@]} -gt 0 ]; then
    echo 'ERROR: Cannot combine --skip-field and --match-field.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#skippedFields[@]} -gt 0 -o ${#matchedFields[@]} -gt 0 ] && [ -n "$skipPattern" -o -n "$matchPattern" ]; then
    echo 'ERROR: Cannot combine --skip-field / --match-field with --skip / --match.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ "$isInPlace" ]; then
    awkCall=(gawk -i inplace -v "INPLACE_SUFFIX=$inPlaceExtension" -v "inplace::suffix=$inPlaceExtension")
fi

IFS=$'\n'
exec "${awkCall[@]}" "${awkArgs[@]}" \
    -v "fieldList=${skippedFields[*]//\\/\\\\}${matchedFields[*]//\\/\\\\}" \
    -v "isSkippedFields=${skippedFields:+t}" \
    -v "skipPattern=${skipPattern//\\/\\\\}" \
    -v "matchPattern=${matchPattern//\\/\\\\}" \
    -v "ignorePattern=${ignorePattern//\\/\\\\}" \
    -v "order=$order" \
'
BEGIN {
    fieldNum = split(fieldList, fieldArray, "\n")
    for (f in fieldArray) {
	fields[fieldArray[f]] = 1
    }
}
{
    if (ignorePattern != "" && $0 ~ ignorePattern) {
	print
	next
    }

    lineIdentity = $0
    if (fieldNum > 0) {
	lineIdentity = ""
	for (i = 1; i <= NF; ++i) {
	    negatedI = i - NF - 1
	    if ((isSkippedFields && ! fields[i] && ! fields[negatedI]) || (! isSkippedFields && (fields[i] || fields[negatedI]))) {
		lineIdentity = lineIdentity $i FS
	    }
	}
    } else {
	if (matchPattern != "") {
	    nonMatchNum = split(lineIdentity, ignoredMatches, matchPattern, nonMatches)
	    matchResult = ""
	    for (i = 0; i <= nonMatchNum; ++i) {
		matchResult = matchResult nonMatches[i]
	    }
	    lineIdentity = matchResult
	}

	if (skipPattern != "" && lineIdentity ~ skipPattern) {
	    matchNum = split(lineIdentity, matches, skipPattern)
	    skipResult = ""
	    for (i = 1; i <= matchNum; ++i) {
		skipResult = skipResult matches[i]
	    }
	    lineIdentity = skipResult
	}
    }

    if (order == "first") {
	if (! seen[lineIdentity]++) {
	    print
	}
    } else {
	last[lineIdentity] = $0
	lastNr[lineIdentity] = NR

	if (order == "both" && ! seen[lineIdentity]++) {
	    first[lineIdentity] = $0
	    firstNr[lineIdentity] = NR
	}
    }
}
END {
    for (id in lastNr) {
	numbers[lastNr[id]] = id
    }
    for (id in firstNr) {
	numbers[firstNr[id]] = id
    }

    PROCINFO["sorted_in"] = "@ind_num_asc"
    for (nr in numbers) {
	id = numbers[nr]
	if (id in first) {
	    print first[id]
	    delete first[id]
	} else if (id in last) {
	    print last[id]
	    delete last[id]
	} else {
	    printf("ASSERT: Cannot find record for line %d\n", id) > "/dev/stderr"
	    exit 3
	}
    }
}
' "$@"
