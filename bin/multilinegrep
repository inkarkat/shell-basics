#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-E|--extended-regexp] [-F|--fixed-strings] [-G|--basic-regexp] [-e|--regexp] \$'PATTERN\\nPATTERN' [-e ...] [-x|--line-regexp] [-y|--block-regexp] [-q|--quiet|--silent] [--line-buffered] [--] [FILE ...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Searches the named input FILEs / standard input for lines containing a match to
the given PATTERN, which can go over multiple lines, and print the matching
lines. Note that empty lines in PATTERN can lead to unexpected results and are
best avoided.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --line-regexp|-x	Select only those matches where each line matches
			exactly match that whole line.
    --block-regexp|-y	Select only those matches where inner contained line
			breaks of PATTERN must match exactly at the end / start
			of lines but the begin and end of the entire PATTERN can
			start / end anywhere in the line.

See also: pcregrep and pcre2grep -M|--multiline can match (like --block-regexp)
with a Perl-compatible regexp syntax.

EXIT STATUS:
    0	Line(s) are selected.
    1	No line(s) have been selected.
    2	Bad invocation, wrong or missing command-line arguments, or an error
	occurred.
HELPTEXT
}

hasMatchMode=
assertSingleMatchMode()
{
    if [ "$hasMatchMode" ]; then
	echo 'ERROR: Only one of -E|--extended-regexp, -F|--fixed-strings, -G|--basic-regexp can be passed.'
	echo
	printUsage "$1"
	exit 2
    fi >&2
}

isLiteral=
groupingBegin='\('
groupingEnd='\)'
startOfFirstLineAssertion=''
startOfSubsequentLinesAssertion='[^\n]*'
endOfSubsequentLinesAssertion='[^\n]*'
endOfLastLineAssertion='[^\n]*'
sedPrint=p
typeset -a patterns=()
typeset -a sedArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printLongUsage "$0"; exit 0;;
	--extended-regexp|-E)	shift; assertSingleMatchMode "$0"; hasMatchMode=t; groupingBegin='('; groupingEnd=')'; sedArgs+=(--regexp-extended);;
	--fixed-strings|-F)	shift; assertSingleMatchMode "$0"; hasMatchMode=t; isLiteral=t;;
	--basic-regexp|-G)	shift; assertSingleMatchMode "$0"; hasMatchMode=t;;
	--regexp|-e)		shift; patterns+=("${1:?}"); shift;;
	--line-regexp|-x)	shift; startOfFirstLineAssertion='^'; startOfSubsequentLinesAssertion=''; endOfSubsequentLinesAssertion=''; endOfLastLineAssertion='';;
	--block-regexp|-y)	shift; startOfSubsequentLinesAssertion=''; endOfSubsequentLinesAssertion='';;
	--quiet|--silent|-q)	shift; sedPrint='';;
	--line-buffered)	shift; sedArgs+=(--unbuffered);;
	--)			break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			if [ ${#patterns[@]} -eq 0 ]; then
				    patterns+=("${1:?}")
				    shift
				fi
				break
				;;
    esac
done
if [ ${#patterns[@]} -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

emptyFileArgCheck()
{
    local isAllEmpty=t filespec
    for filespec
    do
	if [ ! -f "$filespec" ] || [ -s "$filespec" ]; then
	    isAllEmpty=
	    break
	fi
    done
    [ $# -gt 0 ] && [ "$isAllEmpty" ] && exit 1
}

hasNonEmptyFileArg()
{
    local filespec; for filespec
    do
	[ -f "$filespec" ] && [ -s "$filespec" ] && return 0
    done
    return 1
}

typeset -a sedProgram=()
for pattern in "${patterns[@]}"
do
    if [ "$isLiteral" ]; then
	escapedPattern="$(printf %s "$pattern" | sed -e 's/[][\$*.^/]/\\&/g')"
    else
	escapedPattern="${pattern//\//\\/}"
    fi

    readarray -t lines <<<"$escapedPattern"
    endOfFirstLineAssertion="$endOfSubsequentLinesAssertion"; [ ${#lines[@]} -eq 1 ] && endOfFirstLineAssertion="$endOfLastLineAssertion"
    endOfLineAssertion="$endOfSubsequentLinesAssertion"
    sedProgram+=(-e "/${startOfFirstLineAssertion}${groupingBegin}${lines[0]}${groupingEnd}${endOfFirstLineAssertion}\$/{")
    lines=("${lines[@]:1}")

    while [ ${#lines[@]} -gt 0 ]
    do
	[ ${#lines[@]} -eq 1 ] && endOfLineAssertion="$endOfLastLineAssertion"
	line="${lines[0]}"; lines=("${lines[@]:1}")
	sedProgram+=(-e '$b end' -e "N; /\\n${startOfSubsequentLinesAssertion}${groupingBegin}${line}${groupingEnd}${endOfLineAssertion}\$/!D")
    done

    sedProgram+=(-e "h; ${sedPrint}${sedPrint:+; }b }")    # Non-empty hold space signals we've found a match.
done
sedProgram+=(-e ':end' -e '${ g; /^$/q 1 }')


if ! exists ifne; then
    # Without ifne, we can only handle empty physical files, not empty special
    # files or stdin.
    emptyFileArgCheck "$@"

    exec sed -n "${sedArgs[@]}" "${sedProgram[@]}" "$@"
elif [ $# -eq 0 ]; then
    ifne -n false | sed -n "${sedArgs[@]}" "${sedProgram[@]}"
elif ! hasNonEmptyFileArg "$@"; then
    cat "$@" | ifne -n false | sed -n "${sedArgs[@]}" "${sedProgram[@]}"
    typeset -a results=("${PIPESTATUS[@]}")
    if [ ${results[0]} -ne 0 ]; then
	exit 2
    elif [ ${results[1]} -ne 0 ]; then
	exit 1
    else
	exit ${results[2]}
    fi
else
    # Optimization: When it's been determined that there's at least one
    # non-empty file argument, we can skip the ifne pipeline, as sed can handle
    # non-empty input just fine.
    exec sed -n "${sedArgs[@]}" "${sedProgram[@]}" "$@"
fi
