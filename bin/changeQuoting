#!/bin/bash
set -o noglob

printUsage()
{
    cat <<HELPTEXT
Change / canonicalize the quoting of ARGS to single quotes where necessary /
$'...' (unless --posix disallows that syntax) for special whitespace.
HELPTEXT
    echo
    printf "Usage: printf '%%q ' ARGS [...] | %q %s\\n" "$(basename "$1")" '[--posix] [-s|--separator SEP] [-?|-h|--help]'
}
quoter=bashQuote
separator=' '
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--posix)	shift; quoter=posixQuote;;
	--separator|-s)	shift; separator="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

posixQuote()
{
    case "$1" in
	*[$'\\ `\'\"\n\r\t\v?*[]!+']*) printf %s "'${1//\'/\'\\\'\'}'";;
	*)	printf %s "$1";;
    esac
}
bashQuote()
{
    case "$1" in
	*[$'\n\r\t\v']*)	printf %q "$1";;
	*[$'\\ `\'\"?*[]!+']*)  printf %s "'${1//\'/\'\\\'\'}'";;
	*)			printf %s "$1";;
    esac
}


IFS=$'\n' read -r line
eval "set -- $line"
isFirst=t
for arg
do
    [ "$isFirst" ] || printf %s "$separator"
    $quoter "$arg"
    isFirst=
done
[ "$isFirst" ] || printf '\n'
