#!/bin/bash
# Source: https://stackoverflow.com/a/17841619/813602
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--prefix PREFIX] [--suffix SUFFIX] [--empty TEXT] [--omit-empty] [--last-separator LAST-SEPARATOR] [--truncate-after "N[ TRAIL-OFF]"] [--summarize-larger "N[ ENTRIES]"] [--] SEPARATOR [ARG ...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...] - SEPARATOR'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Join all ARGs with SEPARATOR in between each.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --prefix PREFIX	Put PREFIX before anything else.
    --suffix SUFFIX	Append SUFFIX at the end.
    --empty TEXT	Print TEXT instead of nothing when there are no ARGs at
			all.
    --omit-empty	Do not put a SEPARATOR around completely empty ARGs
			(empty lines with -), and don't count them for
			truncation or summary.
    --last-separator LAST-SEPARATOR
			Use LAST-SEPARATOR instead of SEPARATOR for joining the
			second-to-last and last ARGs.
    --truncate-after N[ TRAIL-OFF]
			After enumerating N ARGs, omit further ARGs and just
			trail off with ... / TRAIL-OFF.
    --summarize-larger N[ ENTRIES]
			If there are more than N ARGs, do not print any and just
			summarize as N elements / ENTRIES.
SEE ALSO:
- collapseToSingleLine takes lines from files / standard input and can do
  wrapping and elaborate line breaking.

EXIT STATUS:
    0	Complete success.
    2	Bad invocation, wrong or missing command-line arguments.
    99	No ARGs at all and no alternative --empty TEXT given.
HELPTEXT
}
unset separator
unset lastSeparator
prefix=
suffix=
emptyText=
isOmitEmpty=
truncateNum=
truncateText=' ...'
summarizeNum=
summarizeText=' elements'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--prefix)	shift; prefix="$1"; shift;;
	--suffix)	shift; suffix="$1"; shift;;
	--empty)	shift; emptyText="$1"; shift;;
	--omit-empty)	shift; isOmitEmpty=t;;
	--last-separator)
			shift; lastSeparator="$1"; shift;;
	--truncate-after)
			shift
			text="${1#+([0-9])}"
			truncateNum=${1%"$text"}
			if [ -z "$truncateNum" ]; then
			    echo 'Missing N.'
			    echo
			    printUsage "$0"
			    exit 2
			fi >&2
			[ -n "$text" ] && truncateText="$text"
			shift
			;;
	--summarize-larger)
			shift
			text="${1#+([0-9])}"
			summarizeNum=${1%"$text"}
			if [ -z "$summarizeNum" ]; then
			    echo 'Missing N.'
			    echo
			    printUsage "$0"
			    exit 2
			fi >&2
			[ -n "$text" ] && summarizeText="$text"
			shift
			;;
	--)		shift; break;;
	-)		shift
			if [ $# -ne 1 ]; then
			    printUsage "$0" >&2
			    exit 2
			fi
			separator="${1?}"; shift
			readarray -t args
			set -- "${args[@]}"
			break
			;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

if [ -z "${separator+t}" ]; then
    if [ $# -eq 0 ]; then
	printUsage "$0" >&2
	exit 2
    fi
    separator="${1?}"; shift
fi

if [ "$isOmitEmpty" ]; then
    typeset -a args=()
    for arg
    do
	[ -n "$arg" ] && args+=("$arg")
    done
    set -- "${args[@]}"
fi

if [ $# -eq 0 ]; then
    if [ -n "$emptyText" ]; then
	printf '%s%s%s\n' "$prefix" "$emptyText" "$suffix"
	exit
    else
	exit 99
    fi
fi

if [ -n "$summarizeNum" ] && [ $# -gt $summarizeNum ]; then
    printf '%s%d%s%s\n' "$prefix" $# "$summarizeText" "$suffix"
else
    printf '%s%s' "$prefix" "$1"; shift
    if [ -n "$truncateNum" ] && [ $# -ge $truncateNum ]; then
	set -- "${@:1:$((truncateNum - 1))}"
	printf %s "${@/#/$separator}"
	[ -n "$truncateText" ] && printf %s "$truncateText"
    elif [ $# -ge 1 -a -n "${lastSeparator+t}" ]; then
	lastArg="${!#}"
	set -- "${@:1:$(($#-1))}"
	printf %s "${@/#/$separator}"
	printf %s%s "$lastSeparator" "$lastArg"
    else
	printf %s "${@/#/$separator}"
    fi
    printf '%s\n' "$suffix"
fi
