#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print a timestamp / prefix output from stdin with timestamps, by default as two
space-separated fields in a human-readable format that includes milliseconds.
With --quoted, each argument of MESSAGE is individually quoted (e.g. to preserve
a passed command with arguments in reusable form).
See also: ts (provided by GNU moreutils)
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--human|--short|--sortable] [--no-millis] [-f|--field-separator SEP] [-d|--date DATE] [[--quoted] [--] MESSAGE [...]] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...] [-s|--separator SEP] -'
}

typeset -a dateArgs=()
dateFormat='+%d-%b-%Y${separator}%T${millis}'
separator=' '
millis='.%N'
unset fieldSeparator
isQuoted=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--human)	shift; dateFormat='+%d-%b-%Y${fieldSeparator-_}%T';;
	--short)	shift; dateFormat='+%Y%m%d${fieldSeparator--}%H%M%S';;
	--sortable)	shift; dateFormat='+%Y-%m-%d${fieldSeparator-_}%T${millis}';;
	--no-millis)	shift; millis=''; shift;;
	--field-separator|-f)
			shift; fieldSeparator="$1"; shift;;
	--separator|-s)	shift; separator="$1"; shift;;
	--date|-d)	shift; dateArgs+=(--date "${1:?}"); shift;;
	--quoted)	shift; isQuoted=t;;
	-)		break;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 1 ] && [ "$1" = '-' ]; then
    isEOL=t
    while IFS=$'\n' read -r line || { isEOL=; [ -n "$line" ]; }
    do
	printf "%s%s%s${isEOL:+\\n}" "$(eval "date \"\${dateArgs[@]}\" \"$dateFormat\"")" "$separator" "$line"
    done
elif [ $# -gt 0 ]; then
    if [ "$isQuoted" ]; then
	# Duplicated to echotrace
	# Duplicated to ../../verbose/bin/verbose
	quotedArgs=
	for arg
	do
	    case "$arg" in
		*[$'\n\r\t\v']*) printf -v arg %q "$arg";;
		*[$'\\ `\'\"?*[]!+']*) printf -v arg %s "'${arg//\'/\'\\\'\'}'";;
	    esac
	    quotedArgs="${quotedArgs}${quotedArgs:+ }${arg}"
	done
	set -- "$quotedArgs"
    fi

    printf '%s%s%s\n' "$(eval "date \"\${dateArgs[@]}\" \"$dateFormat\"")" "$separator" "$*"
else
    eval "date \"\${dateArgs[@]}\" \"$dateFormat\""
fi
