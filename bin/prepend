#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Put each LINE at the beginning of existing text in FILE; i.e. at the opposite
end of what >> does in the shell.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--] LINE [...] FILE [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --)			shift;;
esac
if [ $# -lt 2 ]; then
    printUsage "$0" >&2
    exit 2
fi

filespec="${!#}"
typeset -a lines=("${@:1:$(($#-1))}")
typeset -a sedArgs=()

# Note: There's a race condition if the file is created shortly after the check,
# the contents could get lost. Ideally we'd append nothing to the file and use
# the main algorithm for prepending, but sed doesn't trigger on a completely
# empty file. So we need to at least create a single empty line, and adapt the
# sed command to remove that again.
if [ ! -e "$filespec" ]; then
    printf '\n' >> "$filespec"
    sedArgs=(-e '1{/^$/d}')
fi


# Need to escape backslashes and append a backslash to each line except the last
# for sed's i command.
lines=("${lines[@]//\\/\\\\}")
lines=("${lines[@]/%/\\}")
lines[-1]="${lines[-1]%\\}"

IFS=$'\n'
exec sed -i -e "1i\\
${lines[*]}" "${sedArgs[@]}" -- "$filespec"
