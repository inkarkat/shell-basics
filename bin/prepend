#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Put each LINE at the beginning of existing text in FILE; i.e. at the opposite
end of what >> does in the shell.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--] LINE [...] FILE [-?|-h|--help]'
    echo
    printf 'Usage: echo LINE | %q %s\n' "$(basename "$1")" '- FILE'
}
typeset -a lines=()
requiredArgNum=2
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    -)			shift
			readarray -t lines
			[ ${#lines[@]} -gt 0 ] || exit 99
			requiredArgNum=1
			;;
    --)			shift;;
esac
if [ $# -lt $requiredArgNum ]; then
    printUsage "$0" >&2
    exit 2
fi

filespec="${!#}"
[ $# -gt 1 ] && lines=("${@:1:$(($#-1))}")
typeset -a sedArgs=()

# sed doesn't trigger on a completely empty file. So we need to at least create
# a single empty line, and adapt the sed command to remove that again.
if [ ! -s "$filespec" ]; then
    # Note: There's a race condition if the file is created / content is added
    # shortly after the check, but before we can add the empty line.
    printf '\n' >> "$filespec"
    sedArgs=(-e '1{/^$/d}')
fi


# Need to escape backslashes and append a backslash to each line except the last
# for sed's i command.
lines=("${lines[@]//\\/\\\\}")
lines=("${lines[@]/%/\\}")
lines[-1]="${lines[-1]%\\}"

IFS=$'\n'
exec sed -i -e "1i\\
${lines[*]}" "${sedArgs[@]}" -- "$filespec"
