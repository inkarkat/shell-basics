#!/bin/bash
# Source: http://stackoverflow.com/a/10660730/813602

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-f|--filespec] [-n|--newlines] [--] TEXT|- [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
URL-encode TEXT (or text read from stdin via -).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --filespec|-f   path separators (/) are kept unencoded instead of using %2f
    --file-url|-F   Interpret argument as a local filespec, make it absolute,
		    and print as file:// URL.
    --newlines|-n   new lines are kept unencoded instead of using %0a
HELPTEXT
}

isFilespec=
isFileUrl=
urlPrefix=
isNewlines=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--filespec|-f)	shift; isFilespec=t;;
	--file-url|-F)	shift; isFilespec=t; isFileUrl=t; urlPrefix='file://';;
	--newlines|-n)	shift; isNewlines=t;;
	--)		shift; break;;
	-)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 1 ]; then
    printUsage "$0" >&2
    exit 2
fi

if [ "$1" = '-' ]; then
    string=$(< /dev/stdin)
    [ -n "$string" ] || exit 1
else
    string=${1?}
fi
[ "$isFileUrl" ] && string="$(realpath --no-symlinks -- "$string")"
readonly strlen=${#string}
encoded=
pos=

for (( pos=0; pos < strlen; pos++ ))
do
    c=${string:$pos:1}
    case "$c" in
	[-_.~a-zA-Z0-9])	o="$c";;
	/)			[ "$isFilespec" ] && o="$c" || printf -v o '%%%02x' "'$c";;
	$'\n')			[ "$isNewlines" ] && o="$c" || printf -v o '%%%02x' "'$c";;
	*)			printf -v o '%%%02x' "'$c";;
    esac
    encoded+="$o"
done
printf '%s%s\n' "$urlPrefix" "$encoded"
